{"version":3,"sources":["Components/Job.js","Components/JobModel.js","Components/Jobs.js","App.js","index.js"],"names":["Job","job","counter","handleClick","Typography","className","variant","url","includes","style","fontSize","marginTop","color","fontWeight","Paper","onClick","backgroundColor","title","company","location","categories","alt","height","width","src","company_logo","diffDays","Transition","React","forwardRef","props","ref","Slide","direction","JobModel","open","handleClose","howToApplyStr","Dialog","fullWidth","maxWidth","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","float","marginRight","DialogContent","DialogContentText","dangerouslySetInnerHTML","__html","description","DialogActions","Button","target","href","useStyles","makeStyles","root","flexGrow","Jobs","jobs","useState","selectedJob","selectJob","setOpen","classes","theme","useTheme","activeStep","setActiveStep","search","setSearch","remote","setRemote","scrollToTop","scrollDuration","scrollStep","window","scrollY","scrollInterval","setInterval","scrollBy","clearInterval","map","d","Date","Date1","toString","getTime","Date2","lastAdded","Math","floor","sort","a","b","lastUpdated","filter","x","dateNow","toISOString","diffHours","abs","undefined","how_to_apply","split","desc","toLowerCase","toLocaleLowerCase","console","log","jobOnPage","slice","marginBottom","type","onInput","e","value","placeholder","length","key","ceil","MobileStepper","steps","position","nextButton","size","prevActiveStep","disabled","backButton","App","jobList","updateJobs","useEffect","updateCb","async","fetch","res","json","JobFetch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e551837.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\n\r\nexport default function Job({ job, counter, handleClick }) {\r\n    return (\r\n        <div>\r\n            <Typography className=\"counter\" variant=\"h6\">{counter + 1}</Typography>\r\n            {\r\n                job.url.includes('github') === true ?\r\n\r\n                    <Typography style={{ fontSize: '11px', marginTop: '10px', color:'blue', fontWeight:'bold' }}>Source: Github</Typography> : (job.url.includes('stackoverflow') === true ? <Typography style={{ fontSize: '11px', marginTop: '10px', color:'blue', fontWeight:'bold' }}>Source: Stackoverflow</Typography> : '')}\r\n\r\n            <Paper onClick={handleClick} style={{ backgroundColor: '#f1f1f1' }} className=\"job\">\r\n                <div>\r\n                    <Typography variant=\"h5\">{job.title}</Typography>\r\n                    <Typography variant=\"h6\">{job.company}</Typography>\r\n                    <Typography>{job.location}</Typography>\r\n                    <Typography style={{fontSize:'12px'}} className=\"tags\">{job.categories}</Typography>\r\n\r\n                </div>\r\n                <div>\r\n                    <img alt='' style={{ height: '60x', width: '60px' }} src={job.company_logo}></img>\r\n\r\n                    <Typography style={{ fontSize: '12px' }} className=\"postedDay\">\r\n                        {job.diffDays < 1 ? 'Today Posted' : job.diffDays === 1 ? 'Yesterday Posted' : job.diffDays + ' Day Ago Posted'}\r\n                    </Typography>\r\n                </div>\r\n            </Paper >\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function JobModel({ job, open, handleClose, howToApplyStr }) {\r\n\r\n  if (job.title === '') {\r\n    return <div></div>\r\n  }\r\n\r\n  // pop-up job detail page\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        fullWidth={true}\r\n        maxWidth={'md'}\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">\r\n          <div>\r\n            <label style={{ fontSize: '30px' }}>{job.title}</label>\r\n            {<img style={{ height: '40px', float: \"right\", marginRight: '50px' }} alt=\"\" src={job.company_logo} />}\r\n          </div></DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-slide-description\"\r\n            dangerouslySetInnerHTML={{ __html: job.description }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          <Button color=\"primary\">\r\n            <a target={'_blank'} href={howToApplyStr}>Apply</a>\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Job from \"./Job\";\r\nimport JobModel from \"./JobModel\";\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 600,\r\n        flexGrow: 1,\r\n    },\r\n});\r\n\r\nexport default function Jobs({ jobs }) {\r\n\r\n    // job Model\r\n    const [selectedJob, selectJob] = React.useState({});\r\n\r\n    // material ui pagination\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [search, setSearch] = React.useState('');\r\n    const [remote, setRemote] = React.useState(false);\r\n\r\n    // lift top\r\n    function scrollToTop(scrollDuration) {\r\n        var scrollStep = -window.scrollY / (scrollDuration / 15),\r\n            scrollInterval = setInterval(function () {\r\n                if (window.scrollY !== 0) {\r\n                    window.scrollBy(0, scrollStep);\r\n                }\r\n                else clearInterval(scrollInterval);\r\n            }, 15);\r\n    }\r\n\r\n    const handleNext = () => {\r\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\r\n        scrollToTop(300);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep(prevActiveStep => prevActiveStep - 1);\r\n        scrollToTop(300);\r\n    };\r\n\r\n    jobs.map(job => {\r\n        const d = new Date();\r\n        const Date1 = new Date(d.toString()).getTime();\r\n        const Date2 = new Date(job.lastAdded).getTime();\r\n        const diffDays = Math.floor((Date1 - Date2) / (1000 * 60 * 60 * 24));\r\n        return job.diffDays = diffDays;\r\n    });\r\n\r\n    // sort jobs by diffdays\r\n    jobs.sort((a, b) => a.diffDays - b.diffDays);\r\n\r\n    // filter jobs which are older than 100 days\r\n    let lastUpdated = '';\r\n    jobs = jobs.filter((job, x) => {\r\n\r\n        // calculate last update time\r\n        if (x === 0) {\r\n            const d = new Date();\r\n            const dateNow = d.toISOString();\r\n            const diffHours = Math.floor(Math.abs(new Date(dateNow).getTime() + 1000 * 60 * 60 * 3 - new Date(job.lastAdded).getTime()) / (1000 * 60 * 60));\r\n            lastUpdated = diffHours === 0 ? 1 : diffHours > 24 ? diffHours - 24 : diffHours;\r\n        }\r\n\r\n        if (job.diffDays < 101) {\r\n            return true;\r\n        }\r\n        else return false;\r\n    });\r\n\r\n    // get how to apply link\r\n    let howToApplyStr = null;\r\n    if (selectedJob.how_to_apply !== undefined) {\r\n        if (selectedJob.how_to_apply === '') {\r\n            howToApplyStr = selectedJob.url;\r\n        }\r\n        else howToApplyStr = selectedJob.how_to_apply.split('\"')[1];\r\n    }\r\n\r\n    // filter option\r\n    jobs = jobs.filter(job => {\r\n        const desc = job.description.toLowerCase();\r\n        const title = job.title.toLowerCase();\r\n        if (desc.includes(search.toLocaleLowerCase()) || title.includes(search.toLocaleLowerCase())) {\r\n            return true;\r\n        }\r\n        else return false;\r\n    })\r\n\r\n    if (remote) {\r\n        jobs = jobs.filter(job => {\r\n\r\n            const title = job.title.toLowerCase();\r\n            const location = job.location !== undefined ? job.location.toLowerCase() : '';\r\n            if (title.includes('remote') || location.includes('remote')) {\r\n                return true;\r\n            }\r\n            else return false;\r\n        })\r\n    }\r\n    console.log(jobs)\r\n    // pagination structure\r\n    let jobsPerPage = 25;\r\n    let jobOnPage = jobs.slice(activeStep * jobsPerPage, (activeStep + 1) * jobsPerPage);\r\n\r\n    return (\r\n        <div className=\"jobs\">\r\n\r\n            {/* show job detail to user as popup */}\r\n            <JobModel open={open} job={selectedJob} handleClose={handleClose} howToApplyStr={howToApplyStr} />\r\n            <Typography className=\"JobsTitle\" variant='h2'>\r\n                <a className=\"JobsTitle\" href='/'>Jobs</a>\r\n            </Typography>\r\n            <br></br>\r\n\r\n            <Typography style={{ fontSize: '28px', marginTop: '20px', marginBottom: '10px' }}>\r\n                Options\r\n            </Typography>\r\n            <Typography className=\"jobfilter\">\r\n\r\n                <label><input onClick={() => setRemote(!remote)} type=\"checkbox\" /> Remote</label>\r\n                <input onInput={e => setSearch(e.target.value)} placeholder=\"search job\" />\r\n                {/* <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={e => setSearch(e)}>\r\n                    Search\r\n              </Button> */}\r\n            </Typography>\r\n            <div className=\"updateInfo\">\r\n                <b>\r\n                    Last Updated: {lastUpdated === 1 ? lastUpdated + ' Hour Ago' : lastUpdated + ' Hours Ago'}\r\n\r\n                </b>\r\n            </div>\r\n            <hr />\r\n\r\n            <div className=\"jobCount\">\r\n                {jobs.length !== 0 ? 'Total ' + jobs.length + ' Jobs Listed' : null}\r\n            </div>\r\n            {\r\n                jobOnPage.map((job, counter, diffDays) => <Job handleClick={() => { handleClickOpen(); selectJob(job) }} key={counter + (activeStep) * jobsPerPage} job={job} counter={counter + (activeStep) * jobsPerPage} diffDays={diffDays} />)\r\n            }\r\n\r\n            {/* pagination */}\r\n            <div>\r\n                Page {activeStep + 1} of {Math.ceil(jobs.length / jobsPerPage)}\r\n            </div>\r\n            <MobileStepper\r\n                variant=\"progress\"\r\n                steps={Math.ceil(jobs.length / jobsPerPage)}\r\n                position=\"static\"\r\n                activeStep={activeStep}\r\n                className={classes.root}\r\n                nextButton={\r\n                    <Button size=\"small\" onClick={handleNext} disabled={activeStep === Math.ceil(jobs.length / jobsPerPage) - 1}>\r\n                        Next\r\n          {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n                    </Button>\r\n                }\r\n                backButton={\r\n                    <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n                        Back\r\n        </Button>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Jobs from \"../src/Components/Jobs\";\n\nconst JOB_API_URL = 'http://localhost:3001/jobs';\n\n// fetch jobs by our api\nasync function JobFetch(updateCb) {\n  const res = await fetch(JOB_API_URL);\n  const json = await res.json();\n  updateCb(json);\n}\n\nfunction App() {\n\n  const [jobList, updateJobs] = React.useState([]);\n\n  // submit user email address and check email validation\n  // const onSubmit = () => {\n\n  //   if (email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n\n  //     label = \"Error\";\n  //     helperText = \"Invalid Email Address\";\n  //     console.log(helperText)\n  //   }\n  //   else if (email === '') {\n\n  //     label = \"Error\";\n  //     helperText = \"Invalid Email Address\";\n  //     setOpen(true)\n  //   }\n  //   else {\n  //     setOpen(false)\n  //     console.log(email)\n  //     label = \"\";\n  //     helperText = \"\";\n  //   }\n  // }\n\n  React.useEffect(() => {\n    JobFetch(updateJobs);\n    //it shows subscribe form to user 1 minute later and clear itself\n    // const inter = setInterval(() => {\n    //   setOpen(true);\n    //   clearInterval(inter);\n    // }, 1000 );\n  }, []);\n\n  return (\n    <div className='App'>\n      <Jobs jobs={jobList} />\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}