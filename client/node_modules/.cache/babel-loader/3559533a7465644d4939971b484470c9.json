{"ast":null,"code":"var _jsxFileName = \"A:\\\\Javascripts\\\\ReactJS\\\\job-app\\\\client\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport Jobs from \"../src/Components/Jobs\";\nlet mockJobs = [];\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mockJobs: []\n    };\n\n    this.handleLoad = async () => {\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n      const url = \"https://jobs.github.com/positions.json\"; // site that doesn’t send Access-Control-*\n\n      fetch(proxyurl + url) // https://cors-anywhere.herokuapp.com/https://example.com\n      .then(response => response.json()).then(contents => {\n        mockJobs = Object.keys(contents).map(function (key) {\n          return contents[key];\n        });\n        mockJobs.filter(job => {\n          let jobTitle = job.title.toLowerCase();\n          if (job.title.includes('Application Developers') || jobTitle.includes('manager') || jobTitle.includes('sr.') || jobTitle.includes('architect') || jobTitle.includes('lead')) return false;\n          {\n            return true;\n          }\n        });\n        console.log(mockJobs);\n        this.setState({\n          mockJobs: mockJobs\n        });\n      });\n    };\n  }\n\n  async componentDidMount() {\n    this.handleLoad();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Jobs, {\n      jobs: mockJobs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["A:/Javascripts/ReactJS/job-app/client/src/App.js"],"names":["React","Jobs","mockJobs","App","Component","state","handleLoad","proxyurl","url","fetch","then","response","json","contents","Object","keys","map","key","filter","job","jobTitle","title","toLowerCase","includes","console","log","setState","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,IAAIC,QAAQ,GAAG,EAAf;AAEA,eAAe,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE/CC,KAF+C,GAEvC;AACNH,MAAAA,QAAQ,EAAE;AADJ,KAFuC;;AAAA,SAW/CI,UAX+C,GAWlC,YAAY;AACvB,YAAMC,QAAQ,GAAG,sCAAjB;AACA,YAAMC,GAAG,GAAG,wCAAZ,CAFuB,CAE+B;;AACtDC,MAAAA,KAAK,CAACF,QAAQ,GAAGC,GAAZ,CAAL,CAAsB;AAAtB,OACGE,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,QAAQ,IAAI;AAChBX,QAAAA,QAAQ,GAAGY,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,GAAtB,CAA0B,UAAUC,GAAV,EAAe;AAClD,iBAAOJ,QAAQ,CAACI,GAAD,CAAf;AACD,SAFU,CAAX;AAIAf,QAAAA,QAAQ,CAACgB,MAAT,CAAgBC,GAAG,IAAI;AACrB,cAAIC,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAUC,WAAV,EAAf;AACA,cACEH,GAAG,CAACE,KAAJ,CAAUE,QAAV,CAAmB,wBAAnB,KAAgDH,QAAQ,CAACG,QAAT,CAAkB,SAAlB,CAAhD,IAAgFH,QAAQ,CAACG,QAAT,CAAkB,KAAlB,CAAhF,IACGH,QAAQ,CAACG,QAAT,CAAkB,WAAlB,CADH,IACqCH,QAAQ,CAACG,QAAT,CAAkB,MAAlB,CAFvC,EAIE,OAAO,KAAP;AACF;AACE,mBAAO,IAAP;AACD;AACF,SAVD;AAYAC,QAAAA,OAAO,CAACC,GAAR,CAAYvB,QAAZ;AACA,aAAKwB,QAAL,CAAc;AACZxB,UAAAA,QAAQ,EAAEA;AADE,SAAd;AAGD,OAvBH;AAwBD,KAtC8C;AAAA;;AAM/C,QAAMyB,iBAAN,GAA0B;AAExB,SAAKrB,UAAL;AACD;;AA+BDsB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE1B,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AA9C8C","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Jobs from \"../src/Components/Jobs\";\n\nlet mockJobs = [];\n\nexport default class App extends React.Component {\n\n  state = {\n    mockJobs: [],\n  }\n\n  async componentDidMount() {\n\n    this.handleLoad();\n  }\n\n  handleLoad = async () => {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"https://jobs.github.com/positions.json\"; // site that doesn’t send Access-Control-*\n    fetch(proxyurl + url) // https://cors-anywhere.herokuapp.com/https://example.com\n      .then(response => response.json())\n      .then(contents => {\n        mockJobs = Object.keys(contents).map(function (key) {\n          return contents[key];\n        });\n\n        mockJobs.filter(job => {\n          let jobTitle = job.title.toLowerCase();\n          if (\n            job.title.includes('Application Developers') || jobTitle.includes('manager') || jobTitle.includes('sr.')\n            || jobTitle.includes('architect') || jobTitle.includes('lead')\n            )\n            return false;\n          {\n            return true;\n          }\n        });\n\n        console.log(mockJobs);\n        this.setState({\n          mockJobs: mockJobs,\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jobs jobs={mockJobs} />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}